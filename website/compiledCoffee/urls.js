// Generated by CoffeeScript 1.10.0
(function() {
  var baseURL, beginEnd, comicNum, comicNumRanges, containsPageNumber, findComicNum, from, i, isA6A5A1X2COMBO, isBegin, isEnd, j, k, len, makeUrl, next, obj, oneWayLinks, pad6, pageChain, pageNum, prev, ref, specialNextLinks, specialPageChains, specialPages, specialPages_reverse, specialPrevLinks, to, url;

  baseURL = 'http://www.mspaintadventures.com';

  specialPageChains = [[136, 171], [4298, 4300], [4937, 4939], [4987, 4989], [9801, 9805], [6720, 6724], [6725, 6727]];

  oneWayLinks = {
    6721: 6720,
    6722: 6720,
    6723: 6720,
    6726: 6725
  };

  specialNextLinks = {};

  specialPrevLinks = {};

  comicNumRanges = {
    1: [2, 135],
    2: [136, 216],
    3: [217, 217],
    4: [219, 1892],
    5: [1893, 1900],
    6: [1901, 10000]
  };

  specialPages_reverse = (
    obj = {},
    obj["" + baseURL] = 1901,
    obj[baseURL + "/"] = 1901,
    obj[baseURL + "?s=6"] = 1901,
    obj[baseURL + "/DOTA/"] = 6715,
    obj[baseURL + "/007680/007680.html"] = 7680,
    obj
  );

  for (comicNum in comicNumRanges) {
    beginEnd = comicNumRanges[comicNum];
    specialPages_reverse[baseURL + "/?s=" + comicNum] = beginEnd[0];
  }

  specialPages = {};

  for (url in specialPages) {
    pageNum = specialPages[url];
    specialPages[pageNum] = url;
  }

  pad6 = function(pageNum) {
    var pad, str;
    pad = '000000';
    str = '' + pageNum;
    return pad.substring(0, pad.length - str.length) + str;
  };

  findComicNum = function(pageNum) {
    for (comicNum in comicNumRanges) {
      beginEnd = comicNumRanges[comicNum];
      if (beginEnd[0] <= pageNum && pageNum <= beginEnd[1]) {
        return comicNum;
      }
    }
    console.error("could not find a comic number for page number: " + pageNum);
    return 6;
  };

  isA6A5A1X2COMBO = function(pageNum) {
    return (7688 <= pageNum && pageNum <= 7824);
  };

  makeUrl = function(pageNum) {
    var php;
    console.assert(typeof pageNum === 'number');
    if (pageNum === 1900) {
      pageNum = 1901;
    }
    php = '';
    if (pageNum in specialPages) {
      return specialPages[pageNum];
    } else if (pageNum === 6009) {
      php = 'cascade.php';
    } else if (pageNum === 5982) {
      php = 'sbahj.php';
    } else if ((5664 <= pageNum && pageNum <= 5981)) {
      php = 'scratch.php';
    } else if ((8375 <= pageNum && pageNum <= 8430)) {
      php = 'ACT6ACT6.php';
    } else if ((8753 <= pageNum && pageNum <= 8802)) {
      php = 'ACT6ACT6.php';
    } else if ((9309 <= pageNum && pageNum <= 9347)) {
      php = 'ACT6ACT6.php';
    } else if ((7614 <= pageNum && pageNum <= 7677)) {
      php = 'trickster.php';
    } else if (isA6A5A1X2COMBO(pageNum)) {
      php = 'ACT6ACT5ACT1x2COMBO.php';
    }
    comicNum = findComicNum(pageNum);
    return baseURL + "/" + php + "?s=" + comicNum + "&p=" + (pad6(pageNum));
  };

  containsPageNumber = function(url) {
    if (url in specialPages_reverse) {
      return true;
    }
    return /p=(\d+)/.exec(url).length > 0;
  };

  window.getPageNumber = function(url) {
    if (url in specialPages_reverse) {
      return specialPages_reverse[url];
    }
    return parseInt(/p=(\d+)/.exec(url)[1]);
  };

  isBegin = function(pageNum) {
    for (comicNum in comicNumRanges) {
      beginEnd = comicNumRanges[comicNum];
      if (beginEnd[0] === pageNum) {
        return true;
      }
    }
    return false;
  };

  isEnd = function(pageNum) {
    for (comicNum in comicNumRanges) {
      beginEnd = comicNumRanges[comicNum];
      if (beginEnd[1] === pageNum) {
        return true;
      }
    }
    return false;
  };

  window.nextUrl = function(url) {
    if (url in specialNextLinks) {
      return specialNextLinks[url];
    }
    pageNum = getPageNumber(url);
    if (!isEnd(pageNum)) {
      if (isA6A5A1X2COMBO(pageNum)) {
        pageNum += 2;
      } else {
        pageNum += 1;
      }
    }
    return makeUrl(pageNum);
  };

  window.prevUrl = function(url) {
    if (url in specialPrevLinks) {
      return specialPrevLinks[url];
    }
    pageNum = getPageNumber(url);
    if (!isBegin(pageNum)) {
      if (isA6A5A1X2COMBO(pageNum)) {
        pageNum -= 2;
      } else {
        pageNum -= 1;
      }
    }
    return makeUrl(pageNum);
  };

  window.isFlashPage = function(url) {
    if (!containsPageNumber(url)) {
      return true;
    }
    return pad6(getPageNumber(url)) in window.flashPages;
  };

  window.pageRequiresKeyboard = function(url) {
    var pageNumber;
    if (!containsPageNumber(url)) {
      return false;
    }
    pageNumber = pad6(getPageNumber(url));
    if (!(pageNumber in window.flashPages)) {
      return false;
    }
    return window.flashPages[pageNumber] & 2;
  };

  window.isHomestuckUrl = function(url) {
    if (url === baseURL) {
      return true;
    }
    if (!url.startsWith(baseURL + '/')) {
      return false;
    }
    if (!containsPageNumber(url)) {
      return false;
    }
    return true;
  };

  for (j = 0, len = specialPageChains.length; j < len; j++) {
    pageChain = specialPageChains[j];
    for (i = k = 0, ref = pageChain.length - 2; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
      prev = makeUrl(pageChain[i]);
      next = makeUrl(pageChain[i + 1]);
      specialNextLinks[prev] = next;
      specialPrevLinks[next] = prev;
    }
  }

  for (from in oneWayLinks) {
    to = oneWayLinks[from];
    from = makeUrl(parseInt(from));
    to = makeUrl(to);
    specialNextLinks[from] = to;
    specialPrevLinks[from] = to;
  }

}).call(this);

//# sourceMappingURL=urls.js.map
