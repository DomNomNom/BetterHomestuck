// Generated by CoffeeScript 1.10.0
(function() {
  var appendToCache, baseURL, cache, cacheSize_forward, currentUrl, getIframe, iframe, j, len, makeIframe, nextUrl, pad6, prependToCache, prevUrl, ref, removeFromCache, update,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  cacheSize_forward = 4;

  baseURL = 'http://www.mspaintadventures.com/';

  cache = {};

  ref = $('iframe');
  for (j = 0, len = ref.length; j < len; j++) {
    iframe = ref[j];
    cache[$(iframe).attr('src')] = 1;
  }

  pad6 = function(pageNum) {
    var pad, str;
    pad = '000000';
    str = '' + pageNum;
    return pad.substring(0, pad.length - str.length) + str;
  };

  nextUrl = function(currentUrl) {
    var comicNum, pageNum;
    pageNum = parseInt(/p=(\d+)/.exec(currentUrl)[1]);
    comicNum = parseInt(/s=(\d+)/.exec(currentUrl)[1]);
    return baseURL + '?s=' + comicNum + '&p=' + pad6(pageNum + 1);
  };

  prevUrl = function(currentUrl) {
    var comicNum, pageNum;
    pageNum = parseInt(/p=(\d+)/.exec(currentUrl)[1]);
    comicNum = parseInt(/s=(\d+)/.exec(currentUrl)[1]);
    return baseURL + '?s=' + comicNum + '&p=' + pad6(pageNum - 1);
  };

  currentUrl = function() {
    return $('#current-page').attr('src');
  };

  getIframe = function(url) {
    iframe = $("iframe[src=\"" + url + "\"]");
    console.assert(iframe.length === 1);
    return iframe;
  };

  makeIframe = function(url) {
    return "<iframe class=\"stuckpage\" src=\"" + url + "\"></iframe>";
  };

  prependToCache = function(url) {
    $('.cache-pages').prepend(makeIframe(url));
    return cache[url] = 1;
  };

  appendToCache = function(url) {
    $('.cache-pages').append(makeIframe(url));
    return cache[url] = 1;
  };

  removeFromCache = function(url) {
    getIframe(url).remove();
    return delete cache[url];
  };

  update = function(targetUrl) {
    var basePage, i, k, l, len1, m, ref1, ref2, url, urlsToCache;
    console.assert(targetUrl.startsWith(baseURL));
    urlsToCache = [targetUrl];
    url = targetUrl;
    for (i = k = 0, ref1 = cacheSize_forward; 0 <= ref1 ? k <= ref1 : k >= ref1; i = 0 <= ref1 ? ++k : --k) {
      url = nextUrl(url);
      urlsToCache.push(url);
    }
    for (i = l = ref2 = urlsToCache.length - 1; l >= 0; i = l += -1) {
      url = urlsToCache[i];
      if (!(url in cache) && nextUrl(url) in cache && !(url in flashPages)) {
        prependToCache(url);
      }
    }
    if (targetUrl in flashPages) {
      prependToCache(targetUrl);
    }
    for (m = 0, len1 = urlsToCache.length; m < len1; m++) {
      url = urlsToCache[m];
      if (!(url in cache) && !(url in flashPages)) {
        appendToCache(url);
      }
    }
    getIframe(targetUrl).attr('id', 'current-page');
    $(window).scrollTop(0);
    $('#hold-your-horses').detach().insertAfter(getIframe(targetUrl));
    for (url in cache) {
      if (indexOf.call(urlsToCache, url) < 0) {
        removeFromCache(url);
      }
    }
    history.pushState({
      'page': targetUrl
    }, 'MORE HOMESTUCK', '#' + targetUrl);
    basePage = document.location.href.split('#')[0];
    $('.nextlink').attr('href', '#' + nextUrl(targetUrl));
    return $('.prevlink').attr('href', '#' + prevUrl(targetUrl));
  };

  window.onpopstate = function(event) {
    var url;
    url = '' + document.location;
    url = url.split('#')[1];
    console.log("back: " + url);
    return update(url);
  };

  $('body').mousedown(function(event) {
    var target;
    target = $(event.target);
    if (target.is('body>center') || target.is('body')) {
      update(nextUrl(currentUrl()));
      return event.preventDefault();
    }
  });

  if (document.location.hash.startsWith('#' + baseURL)) {
    update(document.location.hash.substring(1));
  } else {
    update(currentUrl());
  }

  console.assert(currentUrl() in cache);

}).call(this);

//# sourceMappingURL=main.js.map
